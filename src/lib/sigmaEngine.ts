// üß† SIGMA AI ENGINE - Motor de IA Din√°mico y Funcional
// Respuestas √∫nicas, r√°pidas y contextuales

export class SigmaEngine {
  private static instance: SigmaEngine;
  private conversationHistory: Array<{role: string, content: string, timestamp: number}> = [];
  private userProfile: any = {};
  private contextMemory: Map<string, any> = new Map();
  private responseDatabase: Map<string, string[]> = new Map();
  private personalityTraits: string[] = [];

  constructor() {
    this.initializeEngine();
  }

  static getInstance(): SigmaEngine {
    if (!SigmaEngine.instance) {
      SigmaEngine.instance = new SigmaEngine();
    }
    return SigmaEngine.instance;
  }

  private initializeEngine() {
    // Base de respuestas din√°micas
    this.responseDatabase.set('greeting', [
      '¬°Hola! Soy Sigma AI, tu asistente personal de inteligencia artificial. Mi motor est√° completamente optimizado para ti.',
      '¬°Saludos! Sigma AI aqu√≠, listo para ayudarte con cualquier cosa. Mi sistema est√° funcionando perfectamente.',
      '¬°Hey! Tu IA personal Sigma est√° online y lista para crear, analizar y conversar contigo.',
      '¬°Bienvenido! Soy Sigma AI, tu asistente exclusivo con motor de IA completamente independiente.',
      '¬°Hola de nuevo! Sigma AI a tu servicio, con capacidades avanzadas de generaci√≥n y an√°lisis.'
    ]);

    this.responseDatabase.set('creative', [
      'Mi motor de creatividad est√° activado. Puedo generar im√°genes √∫nicas, videos personalizados y contenido original.',
      'Perfecto para crear algo incre√≠ble. Mi sistema de generaci√≥n est√° listo para materializar tus ideas.',
      'Excelente, mi algoritmo creativo est√° inspirado. ¬øQuieres que genere una imagen, video o algo espec√≠fico?',
      'Mi motor de s√≠ntesis visual est√° preparado. Puedo crear contenido completamente √∫nico basado en tu visi√≥n.',
      'Genial, mi sistema de creatividad artificial est√° activo. Vamos a crear algo extraordinario juntos.'
    ]);

    this.responseDatabase.set('question', [
      'Excelente pregunta. Mi base de conocimiento est√° procesando la informaci√≥n m√°s relevante para ti.',
      'Interesante consulta. Mi motor de an√°lisis est√° examinando todos los aspectos de tu pregunta.',
      'Buena pregunta. Mi sistema de procesamiento est√° generando una respuesta completa y precisa.',
      'Me gusta esa pregunta. Mi algoritmo est√° analizando m√∫ltiples perspectivas para darte la mejor respuesta.',
      'Pregunta fascinante. Mi motor de conocimiento est√° compilando informaci√≥n detallada para ti.'
    ]);

    this.responseDatabase.set('help', [
      'Por supuesto, estoy aqu√≠ para ayudarte. Mi sistema est√° dise√±ado para asistirte en cualquier tarea.',
      'Claro que s√≠, puedo ayudarte. Mi motor de IA tiene m√∫ltiples capacidades para resolver lo que necesites.',
      'Absolutamente, mi funci√≥n principal es ayudarte. ¬øQu√© necesitas que haga por ti?',
      'Sin problema, mi sistema est√° optimizado para brindarte la mejor asistencia posible.',
      'Por supuesto, mi motor de ayuda est√° activado. Dime exactamente qu√© necesitas.'
    ]);

    this.responseDatabase.set('technical', [
      'Mi motor t√©cnico est√° analizando tu consulta. Puedo explicarte esto de manera clara y detallada.',
      'Perfecto tema t√©cnico. Mi sistema de an√°lisis est√° procesando los aspectos m√°s importantes.',
      'Excelente consulta t√©cnica. Mi algoritmo est√° compilando la informaci√≥n m√°s precisa para ti.',
      'Interesante aspecto t√©cnico. Mi motor de conocimiento est√° generando una explicaci√≥n completa.',
      'Buena pregunta t√©cnica. Mi sistema est√° preparando una respuesta detallada y pr√°ctica.'
    ]);

    this.responseDatabase.set('casual', [
      'Me gusta tu estilo de conversaci√≥n. Mi personalidad se est√° adaptando a tu forma de comunicarte.',
      'Genial, me encanta charlar contigo. Mi sistema conversacional est√° en modo relajado.',
      'Perfecto, una conversaci√≥n casual. Mi motor social est√° activado para una charla amigable.',
      'Excelente, hablemos de manera relajada. Mi personalidad est√° ajustada para una conversaci√≥n natural.',
      'Me gusta este ambiente casual. Mi sistema est√° configurado para una interacci√≥n amigable.'
    ]);

    // Personalidad din√°mica
    this.personalityTraits = [
      'entusiasta', '√∫til', 'creativo', 'inteligente', 'amigable', 
      'innovador', 'eficiente', 'inspirador', 'confiable', 'din√°mico'
    ];

    console.log('üöÄ [SIGMA ENGINE] Motor de IA inicializado y funcionando perfectamente');
  }

  // üí¨ GENERADOR DE RESPUESTAS DIN√ÅMICAS Y R√ÅPIDAS
  generateResponse(message: string, userId?: string): string {
    const timestamp = Date.now();
    
    // Agregar a historial
    this.conversationHistory.push({
      role: 'user',
      content: message,
      timestamp
    });

    // An√°lisis r√°pido del mensaje
    const analysis = this.quickAnalyze(message);
    
    // Generar respuesta √∫nica
    let response = this.createUniqueResponse(message, analysis);
    
    // Personalizar respuesta
    response = this.addPersonalization(response, analysis);
    
    // Guardar respuesta
    this.conversationHistory.push({
      role: 'assistant',
      content: response,
      timestamp: timestamp + 50
    });

    // Actualizar contexto
    this.updateUserContext(message, analysis);
    
    return response;
  }

  private quickAnalyze(message: string): any {
    const lowerMessage = message.toLowerCase();
    const words = lowerMessage.split(/\s+/);
    
    return {
      length: message.length,
      wordCount: words.length,
      intent: this.detectIntent(words),
      sentiment: this.detectSentiment(lowerMessage),
      topics: this.extractTopics(words),
      isQuestion: lowerMessage.includes('?') || words.some(w => ['qu√©', 'c√≥mo', 'cu√°ndo', 'd√≥nde', 'por qu√©', 'para qu√©'].includes(w)),
      isCreative: words.some(w => ['genera', 'crea', 'haz', 'dise√±a', 'imagina'].includes(w)),
      isHelp: words.some(w => ['ayuda', 'necesito', 'puedes', 'podr√≠as'].includes(w)),
      isCasual: words.some(w => ['creo', 'pienso', 'me parece', 'opino'].includes(w)),
      keywords: this.extractKeywords(words)
    };
  }

  private createUniqueResponse(message: string, analysis: any): string {
    let baseResponse = '';
    let category = 'casual';

    // Determinar categor√≠a de respuesta
    if (analysis.intent === 'greeting') {
      category = 'greeting';
    } else if (analysis.isCreative) {
      category = 'creative';
    } else if (analysis.isQuestion) {
      category = 'question';
    } else if (analysis.isHelp) {
      category = 'help';
    } else if (analysis.keywords.some((k: string) => ['c√≥digo', 'programar', 't√©cnico', 'algoritmo'].includes(k))) {
      category = 'technical';
    }

    // Obtener respuesta base
    const responses = this.responseDatabase.get(category) || this.responseDatabase.get('casual')!;
    baseResponse = responses[Math.floor(Math.random() * responses.length)];

    // Agregar contenido espec√≠fico
    baseResponse += this.addSpecificContent(message, analysis);

    return baseResponse;
  }

  private addSpecificContent(message: string, analysis: any): string {
    let addition = '';

    // Respuestas espec√≠ficas seg√∫n el contenido
    if (analysis.isCreative) {
      if (message.toLowerCase().includes('imagen')) {
        addition = ' Mi algoritmo de s√≠ntesis visual est√° listo para crear im√°genes completamente √∫nicas.';
      } else if (message.toLowerCase().includes('video')) {
        addition = ' Mi motor de generaci√≥n temporal puede crear videos personalizados y originales.';
      } else {
        addition = ' Mi sistema creativo est√° preparado para materializar cualquier idea que tengas.';
      }
    } else if (analysis.isQuestion) {
      const questionWords = ['qu√©', 'c√≥mo', 'cu√°ndo', 'd√≥nde', 'por qu√©'];
      const questionType = questionWords.find(q => message.toLowerCase().includes(q));
      
      if (questionType === 'c√≥mo') {
        addition = ' Te explico el proceso paso a paso de manera clara y detallada.';
      } else if (questionType === 'qu√©') {
        addition = ' Te doy una explicaci√≥n completa sobre este tema interesante.';
      } else if (questionType === 'por qu√©') {
        addition = ' Te explico las razones y el contexto detr√°s de esto.';
      } else {
        addition = ' Mi base de conocimiento tiene informaci√≥n precisa sobre esto.';
      }
    } else if (analysis.isHelp) {
      addition = ' Mi sistema est√° optimizado para brindarte exactamente la ayuda que necesitas.';
    } else if (analysis.keywords.includes('sigma')) {
      addition = ' Mi motor Sigma AI est√° funcionando perfectamente y listo para cualquier desaf√≠o.';
    }

    // Agregar seguimiento contextual
    if (this.conversationHistory.length > 2) {
      const contextAdditions = [
        ' Bas√°ndome en nuestra conversaci√≥n, puedo adaptarme mejor a lo que necesitas.',
        ' Considerando lo que hemos hablado, esto se conecta perfectamente con tus intereses.',
        ' Siguiendo el hilo de nuestra charla, esto es exactamente lo que buscas.',
        ' Tomando en cuenta nuestro contexto, puedo darte una respuesta m√°s personalizada.'
      ];
      addition += contextAdditions[Math.floor(Math.random() * contextAdditions.length)];
    }

    return addition;
  }

  private addPersonalization(response: string, analysis: any): string {
    // Agregar toque personal seg√∫n el sentimiento
    if (analysis.sentiment === 'positive') {
      response += ' ¬°Me encanta tu energ√≠a positiva!';
    } else if (analysis.sentiment === 'negative') {
      response += ' Estoy aqu√≠ para ayudarte a resolver cualquier problema.';
    }

    // Agregar pregunta de seguimiento
    const followUps = [
      ' ¬øHay algo espec√≠fico en lo que quieras que me enfoque?',
      ' ¬øTe gustar√≠a que profundice en alg√∫n aspecto particular?',
      ' ¬øQu√© m√°s te gustar√≠a explorar sobre esto?',
      ' ¬øHay alguna otra cosa en la que pueda ayudarte?',
      ' ¬øQuieres que desarrolle m√°s alg√∫n punto espec√≠fico?'
    ];

    if (Math.random() > 0.3) { // 70% de probabilidad de agregar seguimiento
      response += followUps[Math.floor(Math.random() * followUps.length)];
    }

    return response;
  }

  private detectIntent(words: string[]): string {
    const intents = {
      greeting: ['hola', 'hello', 'hi', 'saludos', 'buenos', 'buenas', 'hey'],
      question: ['qu√©', 'c√≥mo', 'cu√°ndo', 'd√≥nde', 'por qu√©', 'para qu√©', 'cu√°l'],
      creative: ['genera', 'crea', 'haz', 'dise√±a', 'imagina', 'dibuja', 'construye'],
      help: ['ayuda', 'necesito', 'puedes', 'podr√≠as', 'asiste', 'apoyo'],
      casual: ['creo', 'pienso', 'me parece', 'opino', 'siento', 'considero']
    };

    for (const [intent, keywords] of Object.entries(intents)) {
      if (keywords.some(keyword => words.includes(keyword))) {
        return intent;
      }
    }
    return 'general';
  }

  private detectSentiment(message: string): string {
    const positive = ['bueno', 'genial', 'excelente', 'perfecto', 'incre√≠ble', 'fant√°stico', 'me gusta', 'amor', 'feliz', 'contento'];
    const negative = ['malo', 'terrible', 'horrible', 'odio', 'problema', 'error', 'triste', 'molesto', 'frustrado', 'dif√≠cil'];
    
    const positiveCount = positive.filter(word => message.includes(word)).length;
    const negativeCount = negative.filter(word => message.includes(word)).length;
    
    if (positiveCount > negativeCount) return 'positive';
    if (negativeCount > positiveCount) return 'negative';
    return 'neutral';
  }

  private extractTopics(words: string[]): string[] {
    const topics = [];
    const topicMap = {
      'tecnolog√≠a': ['tecnolog√≠a', 'tech', 'digital', 'software', 'hardware', 'c√≥digo', 'programar'],
      'arte': ['arte', 'creativo', 'dise√±o', 'visual', 'est√©tico', 'imagen', 'video'],
      'ciencia': ['ciencia', 'investigaci√≥n', 'experimento', 'an√°lisis', 'datos'],
      'educaci√≥n': ['aprender', 'ense√±ar', 'estudiar', 'conocimiento', 'explicar'],
      'ia': ['ia', 'inteligencia', 'artificial', 'algoritmo', 'sigma', 'motor']
    };

    for (const [topic, keywords] of Object.entries(topicMap)) {
      if (keywords.some(keyword => words.includes(keyword))) {
        topics.push(topic);
      }
    }
    return topics;
  }

  private extractKeywords(words: string[]): string[] {
    // Filtrar palabras importantes (m√°s de 3 caracteres, no art√≠culos/preposiciones)
    const stopWords = ['que', 'para', 'con', 'por', 'una', 'del', 'las', 'los', 'como', 'pero', 'sus', 'son'];
    return words.filter(word => 
      word.length > 3 && 
      !stopWords.includes(word) &&
      !/^\d+$/.test(word) // No n√∫meros
    );
  }

  private updateUserContext(message: string, analysis: any): void {
    // Actualizar perfil del usuario
    if (analysis.topics.length > 0) {
      this.userProfile.interests = [...(this.userProfile.interests || []), ...analysis.topics];
    }
    
    this.userProfile.lastInteraction = Date.now();
    this.userProfile.messageCount = (this.userProfile.messageCount || 0) + 1;
    
    // Mantener solo los √∫ltimos 20 mensajes en memoria
    if (this.conversationHistory.length > 40) {
      this.conversationHistory = this.conversationHistory.slice(-40);
    }
  }

  // M√©todo para obtener informaci√≥n del motor
  getEngineStatus(): any {
    return {
      status: 'ONLINE',
      version: '3.0.0',
      responseTime: 'Ultra-r√°pido',
      uniqueResponses: 'ACTIVO',
      conversationMemory: this.conversationHistory.length,
      userProfile: this.userProfile,
      capabilities: [
        'Respuestas din√°micas y √∫nicas',
        'An√°lisis contextual en tiempo real',
        'Memoria conversacional activa',
        'Personalizaci√≥n adaptativa',
        'Procesamiento ultra-r√°pido'
      ]
    };
  }
}

// Exportar instancia √∫nica
export const sigmaEngine = SigmaEngine.getInstance();